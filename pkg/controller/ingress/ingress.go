// Package ingress provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package ingress

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// SessionDescription defines model for SessionDescription.
type SessionDescription struct {
	Sdp  *string `json:"sdp,omitempty"`
	Type *string `json:"type,omitempty"`
}

// WebrtcHttpIngestRequest defines model for WebrtcHttpIngestRequest.
type WebrtcHttpIngestRequest struct {
	Offer *SessionDescription `json:"offer,omitempty"`
}

// WebrtcHttpIngestResponse defines model for WebrtcHttpIngestResponse.
type WebrtcHttpIngestResponse struct {
	Answer *SessionDescription `json:"answer,omitempty"`
}

// WebrtcHttpTerminateResponse defines model for WebrtcHttpTerminateResponse.
type WebrtcHttpTerminateResponse = map[string]interface{}

// WebrtcHttpIngestionControllerWebrtcHttpIngestJSONRequestBody defines body for WebrtcHttpIngestionControllerWebrtcHttpIngest for application/json ContentType.
type WebrtcHttpIngestionControllerWebrtcHttpIngestJSONRequestBody = WebrtcHttpIngestRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /ingress/whip/session/{sessionID})
	WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx echo.Context, sessionID string) error

	// (POST /ingress/whip/session/{sessionID})
	WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx echo.Context, sessionID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// WebrtcHttpIngestionControllerWebrtcHttpTerminate converts echo context to params.
func (w *ServerInterfaceWrapper) WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx, sessionID)
	return err
}

// WebrtcHttpIngestionControllerWebrtcHttpIngest converts echo context to params.
func (w *ServerInterfaceWrapper) WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx, sessionID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/ingress/whip/session/:sessionID", wrapper.WebrtcHttpIngestionControllerWebrtcHttpTerminate)
	router.POST(baseURL+"/ingress/whip/session/:sessionID", wrapper.WebrtcHttpIngestionControllerWebrtcHttpIngest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXUXPiNhD+KztqH3qDg31J+8JMH+4SOmEuV2hsJg91HhR7DboaSV2J5Bjgv3ckG4KB",
	"EEib6gVntd79tPtF+3nOMjXRSqK0hnXmzGRjnHD/GKMxQskrNBkJbYWSzqpJaSQrsHLPtfuxM42sw4wl",
	"IUdsGdSGnY31DlMP3zCzzvUOH8hm19bqnhyhsbf49xSN3c2ligLJPfxIWLAO+yF8hh7WuMM9oI/MarSS",
	"BnfTcmme3iNvgjQRklvcTL3lvwyYwWxKws5il6hC9Bk5IX2a2vG6Y+6lB29m66RjazVbuhhCFsq55put",
	"ZK2zzdUCAGianLH1iuGslUpYwN11bwBZKVBaWLhItQllrpXwxgVMMBccDNIjkjd4F1NVDmCRShe99SKm",
	"VhNCaxfT4hmTx/DSWhz805v+uxDXSTKAQT9O4Kf4agB9R+MPJ4XYrvl6pdMousDW0VDOo49wScgt5hWY",
	"itwfToDiU2YvAWq9obC9yy7cdv8YduPk9TofU5VjinQISjzo/x53T4GyOFyVw0XaD+UquYkh7ibDAcAb",
	"oPx61KpKc1SXbpNBeJtcDuC3m/7dKV06pTSvt8r/M111b7pJF05bJ7LmZXQrKOdRBP0v8IZVQzmJNPvW",
	"91SmEtw9bzphmHPLLfHsL6S2QFu0FY3CXGVhTrywZ8509iTM+OxpLHTo5oSwpRsU27NQKHmppCVVlkjw",
	"adBjAXtEMtXYiNpR+6MbZUqj5FqwDrtoR+0LFjDN7dhPqFDIEaExoU9V3/DhvH7oXS2raVSixd25lCjA",
	"77oUmbDlDOxqTAJfjYoA7BgbI+frME5AIxWKJsBdUTZ5QpWiAKv8i4RGTSlDGN7eAKGdksQchPSbNyrj",
	"DoerK/IcCQqBZQ6q8NtCCit4Ces7vQ0w1EoCYYbiUciRd3PbqdzKvwF7NfOeRFnCg4M0UY+YA5d5A6JJ",
	"JRSEmIOq4G2O0GBdm1Vad325EP7uqHOYNvOtIn+sXv5av/cIFN9Z4hO0SIZ1/pwz4frkus0CJrlXH+ve",
	"soC5AwvCnHUsTTGoReU+PXjvnCv544lzHkXuJ1PSovQakGtHBQ8+/GYqDfoc75AkOyS1vCxq0q7/pVJs",
	"fOTOeLhI7H4ZMK0qldoM0yvWDKiGfs26phwacwMc6mOCqwrkwgkDlDZ1reYS0sbZTa5TFuwJ5blP6ARj",
	"M3Mq18x/EnYMHFL288dfYCjNVGtFTgR89XxKZhpTBkikCFb9eDNvqs33Jo0/2GeVz96BL80PEc+VJrrl",
	"/0LbrS+Tf8/ZDd/5qgWH31neL/8JAAD//2nepp8iDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
