// Package ingress provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package ingress

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// SessionDescription defines model for SessionDescription.
type SessionDescription struct {
	Sdp  *string `json:"sdp,omitempty"`
	Type *string `json:"type,omitempty"`
}

// WebrtcHttpIngestRequest defines model for WebrtcHttpIngestRequest.
type WebrtcHttpIngestRequest struct {
	Offer *SessionDescription `json:"offer,omitempty"`
}

// WebrtcHttpIngestResponse defines model for WebrtcHttpIngestResponse.
type WebrtcHttpIngestResponse struct {
	Answer *SessionDescription `json:"answer,omitempty"`
}

// WebrtcHttpTerminateResponse defines model for WebrtcHttpTerminateResponse.
type WebrtcHttpTerminateResponse = map[string]interface{}

// WebsocketSignalRequest defines model for WebsocketSignalRequest.
type WebsocketSignalRequest = map[string]interface{}

// WebsocketSignalResponse defines model for WebsocketSignalResponse.
type WebsocketSignalResponse = map[string]interface{}

// WebrtcHttpIngestionControllerWebrtcHttpIngestJSONRequestBody defines body for WebrtcHttpIngestionControllerWebrtcHttpIngest for application/json ContentType.
type WebrtcHttpIngestionControllerWebrtcHttpIngestJSONRequestBody = WebrtcHttpIngestRequest

// WebrtcHttpIngestionControllerWebsocketRtcSignalJSONRequestBody defines body for WebrtcHttpIngestionControllerWebsocketRtcSignal for application/json ContentType.
type WebrtcHttpIngestionControllerWebsocketRtcSignalJSONRequestBody = WebsocketSignalRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /ingress/whip/session/{sessionID})
	WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx echo.Context, sessionID string) error

	// (POST /ingress/whip/session/{sessionID})
	WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx echo.Context, sessionID string) error

	// (GET /ws-rtc-signal)
	WebrtcHttpIngestionControllerWebsocketRtcSignal(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// WebrtcHttpIngestionControllerWebrtcHttpTerminate converts echo context to params.
func (w *ServerInterfaceWrapper) WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebrtcHttpIngestionControllerWebrtcHttpTerminate(ctx, sessionID)
	return err
}

// WebrtcHttpIngestionControllerWebrtcHttpIngest converts echo context to params.
func (w *ServerInterfaceWrapper) WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebrtcHttpIngestionControllerWebrtcHttpIngest(ctx, sessionID)
	return err
}

// WebrtcHttpIngestionControllerWebsocketRtcSignal converts echo context to params.
func (w *ServerInterfaceWrapper) WebrtcHttpIngestionControllerWebsocketRtcSignal(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebrtcHttpIngestionControllerWebsocketRtcSignal(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/ingress/whip/session/:sessionID", wrapper.WebrtcHttpIngestionControllerWebrtcHttpTerminate)
	router.POST(baseURL+"/ingress/whip/session/:sessionID", wrapper.WebrtcHttpIngestionControllerWebrtcHttpIngest)
	router.GET(baseURL+"/ws-rtc-signal", wrapper.WebrtcHttpIngestionControllerWebsocketRtcSignal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXUXPiuA//Khr//w+3QyBpe/fCzD3sttyU2e7BkTB9uPTBTRTwbrB9sinbKXz3GzuB",
	"kpZS6G3XLwRZkX6SfrHkB5apmVYSpTWs+8BMNsUZ948xGiOUvECTkdBWKOmkmpRGsgIr9Vy7H3uvkXWZ",
	"sSTkhK2CWvBsY7PD1O1XzKxTvcZbstmltbovJ2jsCP+Zo7HPfamiQHIP/ycsWJf9L3yEHta4wx2gD/Rq",
	"tJIGn7vl0izew2+CNBOSW9x2vUvfqOwb2lhMJC+3kvO66otmVwEzmM1J2PvY4a8C/YSckD7O7XRDBPfS",
	"rRezTSxTazVbORtCFsqp5tsMYa329moBADRFTth6RdBupRKWcH3ZH0JWCpQWls5SLUKZayW8cAkzzAUH",
	"g3SH5AVexVQFAVim0llvvYip1YTQeo5p+YjJY3hpLff+9aIfZ+IySYYwHMQJ/BJfDGHgvo4PR5l4mvPN",
	"SudRdIatg6GcRidwTsgt5hWY6pv5cAQU7zJ7CVDrDYntn/dg1Ptr3IuT1/N8SFYOSdI+KPFw8GfcOwbK",
	"cn9W9idpN5SL5CqGuJeMhwBvgPL7QatKzUFVGiXDcJScD+GPq8H1MVU6JjWvl8p/TBe9q17Sg+PWkax5",
	"Gd0aymkUweAzvGHVUI4iza71PZWpBHfOm24Y5txySzz7htQRaIuOokmYqyzMiRe27UTthTDT9mIqdOj6",
	"hLClaxRPW6xQ8lxJS6oskeDjsM8CdodkqrYRdaLOiWtjSqPkWrAuO+tEnTMWMM3t1HeoUMgJoTGhd1Wf",
	"8OFD/dC/WFXdqESLz/tSogC/61Jkwpb3YNfdF/i6VQRgp9hoOV/GcQIaqVA0A+6Sss0TqnoxWOVfJDRq",
	"ThnCeHQFhHZOEnMQ0m9eqYw7HC6vyHMkKASWOajCbwsprOAlbM70DsBYKwmEGYo7ISdezW2n8on/Ldjr",
	"nrcQZQm3DtJM3WEOXOYNiCaVUBBiDqqCt91Cg01u1m7d8eVM+LOj9mE6zJeKfFj9/LV675h7fGWJz9Ai",
	"Gdb9+4EJVydXbRYwyf30saktC5gLWBDmrGtpjkE9q+4aM2+ccjX+eOKcRpH7yZS0KP30xLWjggcffjXV",
	"aPtob9+kt2+C82NRk3aDz9UgyCcuxv1JYjergGlVzXdNM/1iw4Cq6desa45DU26AQx0muKxALtxggNKm",
	"rtRcQtqI3eQ6ZcEOU577hG5gbHpO5Yb5C2GnwCFlv578BmNp5lorckPAF8+n5F5jygCJFMG6Hm/mTbX5",
	"3qTxgX1S+f078KV5v/FcaaJb/RTaPrnw/HfOrgIWLkybbNY2/urhsEzQAz6u1NX9ZWSz6grD3q0iu+5U",
	"P78gO69rP6Aej7oP609i/zurm9W/AQAA//85cMzlCRAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
