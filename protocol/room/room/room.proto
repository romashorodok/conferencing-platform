syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "openapiv3/OpenAPIv3.proto";
import "openapiv3/annotations.proto";
import "model/room_model.proto";

package room;

option go_package = "github.com/romashorodok/conferencing-platform/pkg/gen/room;roompb";

option (openapi.v3.document) = {
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
            }
          }
        }
      ]
    }
  }
};

service RoomController {
  rpc RoomCreate(RoomCreateRequest) returns (RoomCreateResponse) {
    option(google.api.http) = {
      post: "/rooms";
      body: "*";
    };

    option(openapi.v3.operation) = {
      security: [
        {
	        additional_properties: [
            {
	            name: "BearerAuth";
	            value: {
		            value: [];
	            };
	          }
          ];
	      }
      ];
    };
  };

  rpc RoomDelete(RoomDeleteRequest) returns (RoomDeleteResponse) {
    option(google.api.http) = {
      delete: "/rooms/{sessionID}";
    };
  };

  rpc RoomList(RoomListRequest) returns (RoomListResponse) {
    option(google.api.http) = {
      get: "/rooms";
    };
  };

  rpc RoomJoin(RoomJoinRequest) returns (RoomJoinResponse) {
    option(google.api.http) = {
      get: "/rooms/{room_id}";
    };
  };
}

message RoomCreateRequest {
  string room_id = 1;
  reserved 2, 3;
  int32 max_participants = 4;
}

message RoomCreateResponse {
  room.model.Room room = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message RoomDeleteRequest { }
message RoomDeleteResponse { }

message RoomListRequest { }
message RoomListResponse {
  repeated room.model.Room rooms = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message RoomJoinRequest {
}

message RoomJoinResponse {
}
