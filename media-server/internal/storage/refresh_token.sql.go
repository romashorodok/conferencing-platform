// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_token.sql

package storage

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const delRefreshToken = `-- name: DelRefreshToken :exec
DELETE FROM refresh_tokens WHERE refresh_tokens.id = $1
`

func (q *Queries) DelRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.delRefreshTokenStmt, delRefreshToken, id)
	return err
}

const newRefreshToken = `-- name: NewRefreshToken :one
INSERT INTO refresh_tokens (
    private_key_id,
    plaintext,
    expires_at
) VALUES (
    refresh_tokens.private_key_id = $1,
    refresh_tokens.plaintext = $2,
    refresh_tokens.expires_at = $3
) RETURNING id
`

type NewRefreshTokenParams struct {
	PrivateKeyID uuid.UUID
	Plaintext    string
	ExpiresAt    time.Time
}

func (q *Queries) NewRefreshToken(ctx context.Context, arg NewRefreshTokenParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.newRefreshTokenStmt, newRefreshToken, arg.PrivateKeyID, arg.Plaintext, arg.ExpiresAt)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
